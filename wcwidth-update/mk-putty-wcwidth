#!/bin/sh -

main() {
    VER="${1:-10.0.0}"
    DIR="${2:-$(pwd)}"

    add_text > wcwidth-"$VER".c
}

add_combi() {
    sed -e 's/#.*//' -e 's/[\t ]*$//' \
	< $DIR/UNIDATA-$VER/extracted/DerivedGeneralCategory.txt |
    awk -F'[\t ]*;[\t ]*' '
	BEGIN{
	    for(i=0; i<256; i++) {
		hexconv[sprintf("%x",i)] = i;
		hexconv[sprintf("%02x",i)] = i;
		hexconv[sprintf("%02X",i)] = i;
	    }
	}

	$1 != "" && ($2 == "Me" || $2 == "Mn" || $2 == "Cf") {

	    st=$1;
	    sub("\\.\\..*","",st);
	    en=$1;
	    sub(".*\\.\\.","",en);

	    if (length(st) == 4 ) st = "0" st;
	    if (length(st) == 5 ) st = "0" st;
	    if (length(en) == 4 ) en = "0" en;
	    if (length(en) == 5 ) en = "0" en;

	    st = hexconv[substr(st,1,2)]*65536+ hexconv[substr(st,3,2)]*256+ hexconv[substr(st,5,2)];
	    en = hexconv[substr(en,1,2)]*65536+ hexconv[substr(en,3,2)]*256+ hexconv[substr(en,5,2)];

	    for(i=st; i<=en; i++)
		print i ";" $2
	}
    ' | sort -n |
    awk -F\; '
    F==1{t[toupper($1)]=$2; firstn = -1; lastn = -2; }
    F==2 {
	if ($1 == lastn || $1 == lastn+1) {
	    lastn = $1; next;
	} else {
	    if (firstn > 0) outline();
	    firstn = lastn = $1;
	}
    }
    END{
	if (firstn > 0) outline();
    }

    function outline() {
	st=sprintf("%04x", firstn);
	en=sprintf("%04x", lastn);

	if (st != en )
	    print "    {0x"st ", 0x"en"},\t/*",t[toupper(st)],"to",t[toupper(en)],"*/";
	else
	    print "    {0x"st ", 0x"en"},\t/*",t[toupper(st)],"*/";

	firstn = lastn = -1;
    }'  F=1 $DIR/UNIDATA-$VER/UnicodeData.txt F=2 -

}

add_wide() {
    sed -e 's/#.*//' -e 's/[\t ]*$//' \
	< $DIR/UNIDATA-$VER/EastAsianWidth.txt |
    awk -F'[\t ]*;[\t ]*' '
	BEGIN{
	    for(i=0; i<256; i++) {
		hexconv[sprintf("%x",i)] = i;
		hexconv[sprintf("%02x",i)] = i;
		hexconv[sprintf("%02X",i)] = i;
	    }

	    for(i=0; i<65533; i++) {
		tbl[i+2*65536] = 1;
		tbl[i+3*65536] = 1;
	    }

#         CJK Unified Ideographs Extension A: U+3400..U+4DBF
#         CJK Unified Ideographs:             U+4E00..U+9FFF
#         CJK Compatibility Ideographs:       U+F900..U+FAFF
	    for(i=13312; i<19904; i++) tbl[i] = 1;
	    for(i=19968; i<40960; i++) tbl[i] = 1;
	    for(i=63744; i<64256; i++) tbl[i] = 1;

	}

	$1 != "" {

	    st=$1;
	    sub("\\.\\..*","",st);
	    en=$1;
	    sub(".*\\.\\.","",en);
	    v=($2 == "W" || $2 == "F");

	    if (length(st) == 4 ) st = "0" st;
	    if (length(st) == 5 ) st = "0" st;
	    if (length(en) == 4 ) en = "0" en;
	    if (length(en) == 5 ) en = "0" en;

	    st = hexconv[substr(st,1,2)]*65536+ hexconv[substr(st,3,2)]*256+ hexconv[substr(st,5,2)];
	    en = hexconv[substr(en,1,2)]*65536+ hexconv[substr(en,3,2)]*256+ hexconv[substr(en,5,2)];

	    for(i=st; i<=en; i++)
		tbl[i] = v;
	}
	END{
	    for(i in tbl)
		if(tbl[i]) print i ";W"
	}
    ' | sort -n |
    awk -F\; '
    F==1{t[toupper($1)]=$2; firstn = -1; lastn = -2; }
    F==2 {
	if ($1 == lastn || $1 == lastn+1) {
	    lastn = $1; next;
	} else {
	    if (firstn > 0) outline();
	    firstn = lastn = $1;
	}
    }
    END{
	if (firstn > 0) outline();
    }

    function outline() {
	st=sprintf("%04x", firstn);
	en=sprintf("%04x", lastn);

	if (st != en )
	    print "    {0x"st ", 0x"en"},\t/*",t[toupper(st)],"to",t[toupper(en)],"*/";
	else
	    print "    {0x"st ", 0x"en"},\t/*",t[toupper(st)],"*/";

	firstn = lastn = -1;
    }'  F=1 $DIR/UNIDATA-$VER/UnicodeData.txt F=2 -

}

add_ambig() {
    sed -e 's/#.*//' -e 's/[\t ]*$//' \
	< $DIR/UNIDATA-$VER/EastAsianWidth.txt |
    awk -F'[\t ]*;[\t ]*' '
	BEGIN{
	    for(i=0; i<256; i++) {
		hexconv[sprintf("%x",i)] = i;
		hexconv[sprintf("%02x",i)] = i;
		hexconv[sprintf("%02X",i)] = i;
	    }
	}

	$1 != ""  && $2 == "A" {

	    st=$1;
	    sub("\\.\\..*","",st);
	    en=$1;
	    sub(".*\\.\\.","",en);

	    if (length(st) == 4 ) st = "0" st;
	    if (length(st) == 5 ) st = "0" st;
	    if (length(en) == 4 ) en = "0" en;
	    if (length(en) == 5 ) en = "0" en;

	    st = hexconv[substr(st,1,2)]*65536+ hexconv[substr(st,3,2)]*256+ hexconv[substr(st,5,2)];
	    en = hexconv[substr(en,1,2)]*65536+ hexconv[substr(en,3,2)]*256+ hexconv[substr(en,5,2)];

	    for(i=st; i<=en; i++)
		print i ";A"
	}
    ' | sort -n |
    awk -F\; '
    F==1{t[toupper($1)]=$2; firstn = -1; lastn = -2; }
    F==2 {
	if ($1 == lastn || $1 == lastn+1) {
	    lastn = $1; next;
	} else {
	    if (firstn > 0) outline();
	    firstn = lastn = $1;
	}
    }
    END{
	if (firstn > 0) outline();
    }

    function outline() {
	st=sprintf("%04x", firstn);
	en=sprintf("%04x", lastn);

	if (st != en )
	    print "    {0x"st ", 0x"en"},\t/*",t[toupper(st)],"to",t[toupper(en)],"*/";
	else
	    print "    {0x"st ", 0x"en"},\t/*",t[toupper(st)],"*/";

	firstn = lastn = -1;
    }'  F=1 $DIR/UNIDATA-$VER/UnicodeData.txt F=2 -

}

add_text() {
cat <<!
/*
 * This is an implementation of wcwidth() and wcswidth() (defined in
 * IEEE Std 1002.1-2001) for Unicode.
 *
 * http://www.opengroup.org/onlinepubs/007904975/functions/wcwidth.html
 * http://www.opengroup.org/onlinepubs/007904975/functions/wcswidth.html
 *
 * In fixed-width output devices, Latin characters all occupy a single
 * "cell" position of equal width, whereas ideographic CJK characters
 * occupy two such cells. Interoperability between terminal-line
 * applications and (teletype-style) character terminals using the
 * UTF-8 encoding requires agreement on which character should advance
 * the cursor by how many cell positions. No established formal
 * standards exist at present on which Unicode character shall occupy
 * how many cell positions on character terminals. These routines are
 * a first attempt of defining such behavior based on simple rules
 * applied to data provided by the Unicode Consortium.
 *
 * For some graphical characters, the Unicode standard explicitly
 * defines a character-cell width via the definition of the East Asian
 * FullWidth (F), Wide (W), Half-width (H), and Narrow (Na) classes.
 * In all these cases, there is no ambiguity about which width a
 * terminal shall use. For characters in the East Asian Ambiguous (A)
 * class, the width choice depends purely on a preference of backward
 * compatibility with either historic CJK or Western practice.
 * Choosing single-width for these characters is easy to justify as
 * the appropriate long-term solution, as the CJK practice of
 * displaying these characters as double-width comes from historic
 * implementation simplicity (8-bit encoded characters were displayed
 * single-width and 16-bit ones double-width, even for Greek,
 * Cyrillic, etc.) and not any typographic considerations.
 *
 * Much less clear is the choice of width for the Not East Asian
 * (Neutral) class. Existing practice does not dictate a width for any
 * of these characters. It would nevertheless make sense
 * typographically to allocate two character cells to characters such
 * as for instance EM SPACE or VOLUME INTEGRAL, which cannot be
 * represented adequately with a single-width glyph. The following
 * routines at present merely assign a single-cell width to all
 * neutral characters, in the interest of simplicity. This is not
 * entirely satisfactory and should be reconsidered before
 * establishing a formal standard in this area. At the moment, the
 * decision which Not East Asian (Neutral) characters should be
 * represented by double-width glyphs cannot yet be answered by
 * applying a simple rule from the Unicode database content. Setting
 * up a proper standard for the behavior of UTF-8 character terminals
 * will require a careful analysis not only of each Unicode character,
 * but also of each presentation form, something the author of these
 * routines has avoided to do so far.
 *
 * http://www.unicode.org/unicode/reports/tr11/
 *
 * Markus Kuhn -- 2007-05-26 (Unicode 5.0)
 *
 * Permission to use, copy, modify, and distribute this software
 * for any purpose and without fee is hereby granted. The author
 * disclaims all warranties with regard to this software.
 *
 * Latest version: http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c
 */

#include <wchar.h>

#include "putty.h" /* for prototypes */

struct interval {
  unsigned int first;
  unsigned int last;
};

/* auxiliary function for binary search in interval table */
static int bisearch(unsigned int ucs, const struct interval *table, int max) {
  int min = 0;
  int mid;

  if (ucs < table[0].first || ucs > table[max].last)
    return 0;
  while (max >= min) {
    mid = (min + max) / 2;
    if (ucs > table[mid].last)
      min = mid + 1;
    else if (ucs < table[mid].first)
      max = mid - 1;
    else
      return 1;
  }

  return 0;
}


/* The following two functions define the column width of an ISO 10646
 * character as follows:
 *
 *    - The null character (U+0000) has a column width of 0.
 *
 *    - Other C0/C1 control characters and DEL will lead to a return
 *      value of -1.
 *
 *    - Non-spacing and enclosing combining characters (general
 *      category code Mn or Me in the Unicode database) have a
 *      column width of 0.
 *
 *    - SOFT HYPHEN (U+00AD) has a column width of 1.
 *
 *    - Other format characters (general category code Cf in the Unicode
 *      database) and ZERO WIDTH SPACE (U+200B) have a column width of 0.
 *
 *    - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
 *      have a column width of 0.
 *
 *    - Spacing characters in the East Asian Wide (W) or East Asian
 *      Full-width (F) category as defined in Unicode Technical
 *      Report #11 have a column width of 2.
 *
 *    - All remaining characters (including all printable
 *      ISO 8859-1 and WGL4 characters, Unicode control characters,
 *      etc.) have a column width of 1.
 *
 * This implementation assumes that wchar_t characters are encoded
 * in ISO 10646.
 */

int mk_wcwidth(unsigned int ucs)
{
  /* sorted list of non-overlapping intervals of non-spacing characters */
!

cat <<!
  /* All Mn, Me and Cf characters from version $VER of
     http://www.unicode.org/Public/UNIDATA/extracted/DerivedGeneralCategory.txt
   */

  static const struct interval combining[] = {
!

    add_combi

cat <<!
};

  /* sorted list of non-overlapping intervals of wide characters */
  /* All 'W' and 'F' characters from version $VER of
     http://www.unicode.org/Public/UNIDATA/EastAsianWidth.txt
   */

  static const struct interval wide[] = {
!

    add_wide

cat <<\!
};

  /* Fast test for 8-bit control characters and many ISO8859 characters. */
  /* NOTE: this overrides the 'Cf' definition of the U+00AD character */
  if (ucs < 0x0300) {
    if (ucs == 0)
      return 0;
    if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))
      return -1;
    return 1;
  }

  /* binary search in table of non-spacing characters */
  if (bisearch(ucs, combining,
	       sizeof(combining) / sizeof(struct interval) - 1))
    return 0;

  /* The first wide character is U+1100, everything below it is 'normal'. */
  if (ucs < 0x1100)
    return 1;

  /* Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
   * are zero length despite not being Mn, Me or Cf */
  if (ucs >= 0x1160 && ucs <= 0x11FF)
    return 0;

  /* if we arrive here, ucs is not a combining or C0/C1 control character */
  return 1 + (bisearch(ucs, wide, sizeof(wide) / sizeof(struct interval) - 1));
}


int mk_wcswidth(const unsigned int *pwcs, size_t n)
{
  int w, width = 0;

  for (;*pwcs && n-- > 0; pwcs++)
    if ((w = mk_wcwidth(*pwcs)) < 0)
      return -1;
    else
      width += w;

  return width;
}


/*
 * The following functions are the same as mk_wcwidth() and
 * mk_wcswidth(), except that spacing characters in the East Asian
 * Ambiguous (A) category as defined in Unicode Technical Report #11
 * have a column width of 2. This variant might be useful for users of
 * CJK legacy encodings who want to migrate to UCS without changing
 * the traditional terminal character-width behaviour. It is not
 * otherwise recommended for general use.
 */
int mk_wcwidth_cjk(unsigned int ucs)
{
  /* sorted list of non-overlapping intervals of East Asian Ambiguous
   * characters. */
!
cat <<!
  /* All 'A' characters from version $VER of
     http://www.unicode.org/Public/UNIDATA/EastAsianWidth.txt
   */
  static const struct interval ambiguous[] = {
!
    add_ambig

cat <<\!
  };
  int w = mk_wcwidth(ucs);
  if (w != 1 || ucs < 128) return w;

  /* binary search in table of ambiguous characters */
  if (bisearch(ucs, ambiguous,
	       sizeof(ambiguous) / sizeof(struct interval) - 1))
    return 2;
  return 1;
}


int mk_wcswidth_cjk(const unsigned int *pwcs, size_t n)
{
  int w, width = 0;

  for (;*pwcs && n-- > 0; pwcs++)
    if ((w = mk_wcwidth_cjk(*pwcs)) < 0)
      return -1;
    else
      width += w;

  return width;
}
!
}

main "$@"
